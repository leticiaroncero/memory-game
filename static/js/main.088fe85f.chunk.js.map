{"version":3,"sources":["components/Navbar/index.js","components/Hero/index.js","components/CartoonCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","score","topScore","Hero","CartoonCard","src","image","alt","onClick","handleScore","id","App","state","cartoons","clickedCardIds","clickedId","contained","i","length","setState","shuffle","push","temporaryValue","randomIndex","currentIndex","Math","floor","random","this","map","cartoon","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2mEAgBeA,MAbf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,UACX,4BACI,wBAAIA,UAAU,SAAd,eACA,wDACA,sCAAYD,EAAME,MAAlB,iBAAuCF,EAAMG,a,MCK9CC,MAXf,WACI,OACI,yBAAKH,UAAU,cACX,6BACI,2CACA,2G,MCQDI,MAbf,SAAqBL,GACjB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKK,IAAKN,EAAMO,MACZC,IAAKR,EAAMQ,IACXC,QAAS,kBAAMT,EAAMU,YAAYV,EAAMW,U,OCuF5CC,E,2MArFbC,MAAQ,CACNC,WACAZ,MAAO,EACPa,eAAgB,GAChBZ,SAAU,G,EAGZO,YAAc,SAAAM,GAEZ,IADA,IAAIC,GAAY,EACPC,EAAI,EAAGA,EAAI,EAAKL,MAAME,eAAeI,OAAQD,IACpD,GAAI,EAAKL,MAAME,eAAeG,KAAOF,EAAW,CAC9CC,GAAY,EACZ,MAIJ,GAAIA,EACF,EAAKG,SAAS,CACZlB,MAAO,EACPa,eAAgB,GAChBD,SAAU,EAAKO,QAAQ,EAAKR,MAAMC,gBAE/B,CACL,EAAKD,MAAME,eAAeO,KAAKN,GAC/B,IAAMd,EAAQ,EAAKW,MAAMX,MAAQ,EAC3BC,EAAW,EAAKU,MAAMV,SAAW,EACnCD,IAAUC,EACZ,EAAKiB,SAAS,CACZlB,MAAOA,EACPC,SAAUA,EACVW,SAAU,EAAKO,QAAQ,EAAKR,MAAMC,YAGpC,EAAKM,SAAS,CACZlB,MAAOA,EACPY,SAAU,EAAKO,QAAQ,EAAKR,MAAMC,c,EAM1CO,QAAU,SAAAP,GAIR,IAHA,IAAoCS,EAAgBC,EAAhDC,EAAeX,EAASK,OAGrB,IAAMM,GAGXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAIzCF,EAAiBT,EAHjBW,GAAgB,GAIhBX,EAASW,GAAgBX,EAASU,GAClCV,EAASU,GAAeD,EAG1B,OAAOT,G,wEAGC,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEZ,MAAO2B,KAAKhB,MAAMX,MAClBC,SAAU0B,KAAKhB,MAAMV,WACvB,kBAAC,EAAD,MACA,yBAAKF,UAAgC,IAArB4B,KAAKhB,MAAMX,OAAuC,IAAxB2B,KAAKhB,MAAMV,SAAiB,8BAAgC,mBAElG0B,KAAKhB,MAAMC,SAASgB,KAAI,SAAAC,GAAO,OAC7B,kBAAC,EAAD,CACExB,MAAOwB,EAAQxB,MACfC,IAAKuB,EAAQvB,IACbwB,IAAKD,EAAQpB,GACbA,GAAIoB,EAAQpB,GACZD,YAAa,EAAKA,uB,GA7EhBuB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.088fe85f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return (\n        <div className=\"navbar\">\n            <ul>\n                <li className=\"brand\">Clicky Game</li>\n                <li>Click an image to begin!</li>\n                <li>Score: {props.score} | Top Score: {props.topScore}</li>\n            </ul>\n\n        </div>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Hero() {\n    return (\n        <div className=\"hero-image\">\n            <div>\n                <h1>Memory Game</h1>\n                <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n            </div>\n        </div>\n    );\n}\n\nexport default Hero;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CartoonCard(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img src={props.image}\n                    alt={props.alt}\n                    onClick={() => props.handleScore(props.id)} />\n            </div>\n\n        </div>\n    );\n}\n\nexport default CartoonCard;","import React, { Component } from \"react\";\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Hero from \"./components/Hero\"\nimport CartoonCard from \"./components/CartoonCard\";\nimport cartoons from \"./cartoons.json\";\n\n\nclass App extends Component {\n\n  state = {\n    cartoons,\n    score: 0,\n    clickedCardIds: [],\n    topScore: 0\n  };\n\n  handleScore = clickedId => {\n    var contained = false;\n    for (var i = 0; i < this.state.clickedCardIds.length; i++) {\n      if (this.state.clickedCardIds[i] === clickedId) {\n        contained = true;\n        break;\n      }\n    }\n\n    if (contained) {\n      this.setState({\n        score: 0,\n        clickedCardIds: [],\n        cartoons: this.shuffle(this.state.cartoons)\n      });\n    } else {\n      this.state.clickedCardIds.push(clickedId);\n      const score = this.state.score + 1;\n      const topScore = this.state.topScore + 1;\n      if (score === topScore) {\n        this.setState({\n          score: score,\n          topScore: topScore,\n          cartoons: this.shuffle(this.state.cartoons)\n        })\n      } else {\n        this.setState({\n          score: score,\n          cartoons: this.shuffle(this.state.cartoons)\n        })\n      }\n    }\n  };\n\n  shuffle = cartoons => {\n    var currentIndex = cartoons.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = cartoons[currentIndex];\n      cartoons[currentIndex] = cartoons[randomIndex];\n      cartoons[randomIndex] = temporaryValue;\n    }\n\n    return cartoons;\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore} />\n        <Hero />\n        <div className={this.state.score === 0 && this.state.topScore !== 0 ? \"cards-container shake-shake\" : \"cards-container\"}>\n          {\n            this.state.cartoons.map(cartoon => (\n              <CartoonCard\n                image={cartoon.image}\n                alt={cartoon.alt}\n                key={cartoon.id}\n                id={cartoon.id}\n                handleScore={this.handleScore}\n              />)\n            )\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}